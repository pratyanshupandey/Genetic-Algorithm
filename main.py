from client import get_errors
import random
import json
import numpy
# import numpy as np
# 0 = -10
# 1 = swings
# 2 = -10
# 3= 0, -4.5
# 4 = 0.0
# 5 = 0.0
# 6 = -10, 10 train,val
# 7 = 0.0
# 8 = 0.0
# 9 = 0.0
# 10 = 0.0

ID = 'SOql4uavXyMdC9BTYktZDz152sPIhQLm6ucxoy2ujxmqb8o7E1'
OVERFIT_VECTOR = [0.0, -1.457990220064754e-12, -2.2898007842769645e-13, 4.620107525277624e-11, -1.7521481289918844e-10,
                  -1.8366976965696096e-15, 8.529440604118815e-16, 2.2942330256117977e-05, -2.0472100298772093e-06,
                  -1.597928341587757e-08, 9.982140340891233e-10]
POPULATION_SIZE = 10
MUTATION_PROBABILITY = 0.5
GENERATIONS = 9
MUT_RANGE = 0.1
CREAT_VAR_RANGE = 1
VAL_RATIO = 0.4
TRAIN_RATIO = 0.6

all_pops = []


def new_individual(individual):
    new_vec = []
    for genome in individual:
        if genome != 0:
            new_genome = genome * (1 + random.uniform(-CREAT_VAR_RANGE,CREAT_VAR_RANGE))
        else:
            new_genome = random.uniform(-10,10)
        new_vec.append(new_genome)
    return new_vec

def create_population():
    population = []
    population.append(OVERFIT_VECTOR)
    for i in range(1,POPULATION_SIZE):
        population.append(new_individual(OVERFIT_VECTOR))
    return population

def calc_weights(population):
    weights = []
    for individual in population:
        # train_err, valid_err =  get_errors(ID, individual)
        train_err, valid_err = (random.uniform(0,100), random.uniform(0,100))
        weights.append(valid_err)
    print(population)
    print(weights)
    max_weight = max(weights)
    weights = [max_weight - weight for weight in weights]
    return weights

def calc_weights_new(population):
    global all_pops
    weights = []
    for individual in population:
        train_err, valid_err =  get_errors(ID, individual)
        # train_err, valid_err = (random.uniform(0, 100), random.uniform(0, 100))
        weights.append(VAL_RATIO * valid_err + TRAIN_RATIO * train_err)
        all_pops.append((individual, [train_err, valid_err]))
    print(population)
    print(weights)
    max_weight = max(weights)
    weights = [max_weight - weight for weight in weights]
    return weights


def selection(population, weights, size):
    length = len(population)
    sum_weights = sum(weights, start=0)
    normal_weights = [weight/sum_weights for weight in weights]
    indexes = numpy.random.choice(a=length, size=size, replace=False, p=normal_weights)
    parents = [population[index] for index in indexes]
    return parents

def crossover(vectora, vectorb):
    crossover_point = random.randint(1, 10)
    newa = vectora[0:crossover_point] + vectorb[crossover_point:]
    newb = vectorb[0:crossover_point] + vectora[crossover_point:]
    print(id(newa), id(newb), id(vectora), id(vectorb))
    return newa, newb


def threesome(parent1 , parent2, parent3):
    point1, point2 = numpy.random.choice([1,2,3,4,5,6,7,8,9], size=2, replace=False)
    if point1 > point2:
        temp = point1
        point1 = point2
        point2 = temp

    new1 = parent1[0:point1] + parent2[point1:point2] + parent3[point2:]
    new2 = parent3[0:point1] + parent1[point1:point2] + parent2[point2:]
    new3 = parent2[0:point1] + parent3[point1:point2] + parent1[point2:]
    return new1,new2,new3

def next_generation(population, weights):
    next_gen = []
    next_gen.append(population[weights.index(max(weights))])
    for i in range((POPULATION_SIZE-1) // 2):
        parenta, parentb = selection(population, weights, 2)
        gena, genb = crossover(parenta, parentb)
        next_gen.append(gena)
        next_gen.append(genb)
    return next_gen

def next_th_gen(population, weights):
    next_gen = []
    next_gen.append(population[weights.index(max(weights))])
    for i in range((POPULATION_SIZE-1) // 3):
        parenta, parentb, parentc = selection(population, weights, 3)
        gena, genb, genc = threesome(parenta, parentb, parentc)
        next_gen.append(gena)
        next_gen.append(genb)
        next_gen.append(genc)
    return next_gen
    # 10, (1, 9),

def mutation(population, prob):
    for individual in population:
        if random.uniform(0,1) < prob:
            for index in range(11):
                individual[index] += individual[index] * random.uniform(-MUT_RANGE,MUT_RANGE)
    return population



def find_solution():
    population = create_population()
    gen_file = open("gen_file.txt", "a")
    for i in range(GENERATIONS):
        print(i)
        weights = calc_weights(population)
        # print(weights)
        population = next_generation(population, weights)
        mutation(population, MUTATION_PROBABILITY)
        gen_file.write(f"\n{i}\n")
        json.dump(population,gen_file)

    gen_file.close()

def find_th_soln():
    gen_th_file = open("gen_th_file.txt", "a")
    # population = create_population()
    population = [
        [3.921202366806874, -1.3482244839386765e-12, -1.8023360055846345e-13, 7.76232347241796e-11,
         -1.853047778665919e-10, -1.278789924074077e-15, 8.000390260479848e-16, 2.597929642273492e-05,
         -1.607086552356534e-06, -1.8624210442501198e-08, 9.008133455722331e-10],
        [
            5.2594015669615635, -1.6819588892246966e-12, -1.7281901818989917e-13, 9.35771087886328e-11, -1.9653737728756423e-10, -1.3318582788942985e-15, 8.009012963792538e-16, 2.0663219202868532e-05, -1.6336039843372902e-06, -2.032428659950187e-08, 9.167454893889278e-10],
        [
            5.056224099533753, -1.4144844791169936e-12, -1.7131346511739442e-13, 8.088873698144469e-11, -2.0176597266774405e-10, -1.4362616008587951e-15, 5.834000563047367e-16, 2.5749648761395473e-05, -1.6245430223458565e-06, -1.965651347007179e-08, 8.663393856378989e-10],
        [
            5.041242232913953, -1.5854353733394346e-12, -3.2004928771533573e-13, 6.624579274618459e-11, -1.5304082174670361e-10, -1.4274361464831124e-15, 5.528437000389139e-16, 2.3756989868364462e-05, -2.0470754214437842e-06, -1.9504808955090188e-08, 7.929946705258176e-10],
        [
            4.874951284175754, -1.4006914109052628e-12, -3.2004928771533573e-13, 8.859639680796094e-11, -1.973742471649647e-10, -1.4790864068699589e-15, 5.623360007259538e-16, 2.382646554529533e-05, -1.5298401059393558e-06, -1.9504808955090188e-08, 7.929946705258176e-10],
        [
            5.496221858862423, -1.4879425560393322e-12, -1.6529082805789898e-13, 6.402545212875757e-11, -2.1402517732955195e-10, -1.1286044957592899e-15, 7.475952065702702e-16, 2.1469073105819986e-05, -1.4337258194092953e-06, -1.823692791537044e-08, 7.301929039740704e-10],
        [
            5.041242232913953, -1.5854353733394346e-12, -1.760684109154225e-13, 8.859639680796094e-11, -1.5304082174670361e-10, -1.4274361464831124e-15, 5.528437000389139e-16, 2.3756989868364462e-05, -2.0470754214437842e-06, -1.9011618612579117e-08, 9.396655198067152e-10],
        [
            4.822667253516206, -1.535685896558736e-12, -1.640000119511614e-13, 8.040584320800229e-11, -1.7254721417191493e-10, -1.5364807949188013e-15, 5.374034648413998e-16, 2.4234458932175478e-05, -1.5298401059393558e-06, -1.9504808955090188e-08, 7.929946705258176e-10],
        [
            4.889300077014918, -1.6288271731302225e-12, -1.9225902819870917e-13, 8.351576833379423e-11, -1.9785597011337437e-10, -1.1683014236827687e-15, 8.061184245943226e-16, 2.1578984987244805e-05, -1.7913010349737527e-06, -2.0456069346503798e-08, 1.020161848520074e-09],
        [
            5.041242232913953, -1.5854353733394346e-12, -1.760684109154225e-13, 8.859639680796094e-11, -1.973742471649647e-10, -1.4274361464831124e-15, 7.080635141262989e-16, 2.2573514784101714e-05, -1.8917338354151353e-06, -2.007842005020267e-08, 1.032984741684836e-09]

    ]
    gen_th_file.write(f"\n\nInitial Population\n")
    for indi in population:
        gen_th_file.write(str(indi) + '\n')
    for i in range(GENERATIONS):
        print(i+1)
        gen_th_file.write(f"\n\n{i+ 1} Generation\n")

        weights = calc_weights_new(population)

        gen_th_file.write("\n\nWeights\n" + str(weights))

        population = next_th_gen(population,weights)

        gen_th_file.write(f"\nAfter Crossover\n")
        for indi in population:
            gen_th_file.write(str(indi) + '\n')

        population = mutation(population,MUTATION_PROBABILITY)

        gen_th_file.write(f"\nAfter Mutation\n")
        for indi in population:
            gen_th_file.write(str(indi) + '\n')

    gen_th_file.close()



find_th_soln()
import math
# train,valid
all_file = open("all.txt", "a")
best_ind_val = ([], [math.inf,math.inf])
best_ind_train = ([], [math.inf,math.inf])
best_ind_overall = ([], [math.inf,math.inf])

def overall(weight):
    train = weight[0]
    valid = weight[1]
    return train*TRAIN_RATIO + valid*VAL_RATIO

for ind in all_pops:
    if best_ind_val[1][1] > ind[1][1]:
        best_ind_val = ind
    if best_ind_train[1][0] > ind[1][0]:
        best_ind_train = ind
    if overall(best_ind_overall[1]) > overall(ind[1]):
        best_ind_overall = ind
    all_file.write(str(ind) + "\n")

print(best_ind_train)
print(best_ind_val)
print(best_ind_overall)
all_file.close()
# find_solution()
# [390291186291.0382, 242539265028.76385, 214138031745.40417, 206886489618.1717, 190430080178.52347, 332093872541.82733, 172961207744.41193, 213620720044.12302, 412550658550.62537, 242539265028.76385]
# [1425921936610.8008, 1218207512986.0051, 368296728554.589, 219887937100.86172, 331487347902.10046, 422283736836.76697, 299947444456.6427, 7478403334224.537, 1423983274670.1782]

# [13510723202.57021, 368296581138.17303])
# [367869238644.60004, 250997032268.4629])
# [13510723202.57021, 368296581138.17303])
# [155425066376.81134, 8634418304351.941, 16419070141860.379, 15866928675914.508, 2525784042621.0986, 9290373402346.62, 266900038291.06335, 10213392525838.992, 13822021340020.623, 266900038448.57556]
# ([0.0, -1.457990220064754e-12, -2.2898007842769645e-13, 4.620107525277624e-11, -1.7521481289918844e-10, -1.8366976965696096e-15, 8.529440604118815e-16, 2.2942330256117977e-05, -2.0472100298772093e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13510723202.57021, 368296581138.17303])
# ([-3.250619442718241, -1.875649470515401e-12, -2.3055363967886047e-13, 7.164510593350617e-11, -6.193516541106405e-11, -2.8275921322972137e-15, 1.3036853972620294e-15, 2.2942330256117977e-05, -2.0472100298772093e-06, -1.597928341587757e-08, 9.982140340891233e-10], [367869238644.60004, 250997032268.4629])
# ([0.0, -1.457990220064754e-12, -2.2898007842769645e-13, 4.620107525277624e-11, -1.7521481289918844e-10, -1.8366976965696096e-15, 8.529440604118815e-16, 2.2942330256117977e-05, -2.0472100298772093e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13510723202.57021, 368296581138.17303])


# ([0.0, -1.457990220064754e-12, -2.2898007842769645e-13, 4.620107525277624e-11, -1.7521481289918844e-10, -1.8366976965696096e-15, 8.529440604118815e-16, 2.2942330256117977e-05, -2.0472100298772093e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13510723202.57021, 368296581138.17303])
# ([3.1949023879097087, -1.1566445813966808e-12, -1.706303783105885e-13, 7.164510593350617e-11, -2.9798027152778016e-10, -1.4938953170083339e-15, 1.5155307589985295e-15, 3.493791911133584e-05, -2.049689889668182e-06, -9.819094534206726e-09, 7.375886083349607e-10], [1585818192301.4272, 115225209097.53365])
# ([3.1949023879097087, -1.457990220064754e-12, -2.2898007842769645e-13, 4.620107525277624e-11, -6.193516541106405e-11, -2.074692342466953e-15, 8.529440604118815e-16, 2.2942330256117977e-05, -2.0472100298772093e-06, -1.7428368275436407e-08, 9.982140340891233e-10], [32927718972.61308, 273273669071.4101])


# ([3.1949023879097087, -1.457990220064754e-12, -1.706303783105885e-13, 7.164510593350617e-11, -6.193516541106405e-11, -1.8366976965696096e-15, 8.529440604118815e-16, 2.2942330256117977e-05, -1.8132060513780794e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13510853164.756529, 368297136603.43665])
# ([2.38778073873468, -1.520901904977662e-12, -1.706303783105885e-13, 1.1925068458798113e-10, -1.7521481289918844e-10, -1.8366976965696096e-15, 6.35513405133212e-16, 2.2942330256117977e-05, -2.049689889668182e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13680826039.783306, 344259928943.32996])
# ([2.38778073873468, -1.520901904977662e-12, -1.706303783105885e-13, 1.1925068458798113e-10, -1.7521481289918844e-10, -1.8366976965696096e-15, 6.35513405133212e-16, 2.2942330256117977e-05, -2.049689889668182e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13680826039.783306, 344259928943.32996])

# ([2.38778073873468, -1.520901904977662e-12, -1.706303783105885e-13, 1.1925068458798113e-10, -1.7521481289918844e-10, -1.8366976965696096e-15, 6.35513405133212e-16, 1.8335732309083677e-05, -2.049689889668182e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13680826039.74606, 344259928943.9571])
# ([3.6267772192710064, -1.1566445813966808e-12, -2.322003465409993e-13, 9.307512270052608e-11, -7.17507052758996e-11, -1.8366976965696096e-15, 9.625795479384799e-16, 2.2942330256117977e-05, -2.049689889668182e-06, -9.819094534206726e-09, 8.478914662337791e-10], [588634220557.0774, 209061988343.04413])
# ([3.527148438220248, -1.1667084630712077e-12, -1.706303783105885e-13, 6.072923690394727e-11, -1.1252384524074913e-10, -2.1685394479697994e-15, 6.35513405133212e-16, 2.2942330256117977e-05, -2.049689889668182e-06, -1.597928341587757e-08, 9.982140340891233e-10], [60135843090.301476, 234428840487.46906])

# ([2.9549787619289214, -1.1667084630712077e-12, -2.359259938900834e-13, 9.307512270052608e-11, -1.7521481289918844e-10, -1.8366976965696096e-15, 6.35513405133212e-16, 2.2942330256117977e-05, -2.049689889668182e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13680839691.190704, 344260009756.2966])
# ([4.6709184778763735, -1.331321670106532e-12, -2.640820998108539e-13, 8.236500498840023e-11, -1.4107603618904397e-10, -1.7571327539924607e-15, 6.02546810095792e-16, 2.2761788907475968e-05, -2.0346653935789677e-06, -1.4306138386507121e-08, 9.632104098329052e-10], [113206875020.648, 169702969009.363])
# ([3.636355558608914, -1.0888091500055574e-12, -1.660424093748272e-13, 6.128002621637669e-11, -1.2359744497502086e-10, -2.3309122958619073e-15, 6.365023980117066e-16, 2.4262106925305977e-05, -1.929198305032638e-06, -1.7086446383613514e-08, 1.0286490589553033e-09], [60135843054.890114, 234428840521.56412])

# ([3.292624532154753, -1.1066336905268298e-12, -1.783321656865057e-13, 1.097120181994057e-10, -1.927130765988431e-10, -1.7507751679004145e-15, 6.812768864104e-16, 2.4563976710268085e-05, -2.1491298588900864e-06, -1.6382210097314995e-08, 1.0327307427243574e-09], [25366643497.600502, 367595916610.52655])
# ([3.504155429613026, -9.493247564029118e-13, -1.837642431206175e-13, 7.805593381156186e-11, -1.927130765988431e-10, -1.7507751679004145e-15, 7.709238803446512e-16, 2.6593973995779928e-05, -2.0638332105633494e-06, -1.375812971943026e-08, 9.135473398049316e-10], [231875343700.9145, 128218768182.64236])
# ([4.8979698235742095, -1.0131687188205461e-12, -1.9235267810779267e-13, 7.48184791327753e-11, -1.7313136601808207e-10, -2.187150175021577e-15, 6.804660857113377e-16, 2.658151128524374e-05, -1.926906949763515e-06, -1.922963167032137e-08, 9.250455419145837e-10], [62252658965.89327, 213751648349.26712])

# ([3.1719066377217358, -1.1247573004276126e-12, -2.1619667573772053e-13, 1.2738636957297879e-10, -1.4107603618904397e-10, -1.7571327539924607e-15, 6.812768864104e-16, 2.4563976710268085e-05, -2.1491298588900864e-06, -1.6382210097314995e-08, 1.0327307427243574e-09], [25252794501.711365, 364606009818.8205])
# ([3.292624532154753, -1.1247573004276126e-12, -2.1619667573772053e-13, 1.2738636957297879e-10, -1.9681929801400595e-10, -2.175539793827104e-15, 7.322106973797986e-16, 2.5461002290892494e-05, -2.1695054388212757e-06, -1.5933782350985948e-08, 1.0193893740879897e-09], [174611989071.97308, 203210939029.3299])
# ([5.265833794883736, -1.6879589074957075e-12, -2.7813026117421446e-13, 9.287332956980726e-11, -1.3817885813682646e-10, -1.5965205764121932e-15, 6.7760424459823465e-16, 2.54931964498483e-05, -2.0261167534177372e-06, -1.6628724477109794e-08, 1.0071557049791398e-09], [25280444667.08707, 223402721178.2745])

# ([4.631902733974617, -1.3811288109096414e-12, -2.708288606846187e-13, 8.561056158483017e-11, -1.8140305293981616e-10, -1.506645954905446e-15, 7.351285694295228e-16, 2.2099729588525685e-05, -1.828266862074293e-06, -2.099712802578646e-08, 1.0022419271513258e-09], [137961159433.9942, 218513840511.2791])
# ([4.631902733974617, -1.3811288109096414e-12, -2.708288606846187e-13, 8.561056158483017e-11, -1.8140305293981616e-10, -1.506645954905446e-15, 7.351285694295228e-16, 2.2099729588525685e-05, -1.828266862074293e-06, -2.099712802578646e-08, 1.0022419271513258e-09], [332490966873.4827, 202330147745.68976])
# ([4.631902733974617, -1.3811288109096414e-12, -2.708288606846187e-13, 8.561056158483017e-11, -1.8140305293981616e-10, -1.506645954905446e-15, 7.351285694295228e-16, 2.2099729588525685e-05, -1.828266862074293e-06, -2.099712802578646e-08, 1.0022419271513258e-09], [137961159433.9942, 218513840511.2791])

# Removed top from mutation

# ([4.500932662406149, -1.468917954129411e-12, -1.888809860040993e-13, 9.840776060318711e-11, -1.9717330791194055e-10, -9.369162368830616e-16, 7.400196015347466e-16, 1.933838950164572e-05, -2.0828136551842338e-06, -1.3073816222039072e-08, 9.654500408668162e-10], [102707522091.35703, 473395525933.4069])
# ([4.839493223382853, -1.421491336675317e-12, -3.4037321134036137e-13, 6.792604896766736e-11, -1.5784781374140878e-10, -1.2942042734693318e-15, 7.429566597800502e-16, 2.2778401764387124e-05, -1.739909569490717e-06, -2.1037518815356418e-08, 9.405093359930036e-10], [461104654467.78674, 155362428232.8202])
# ([4.681786911095314, -1.3418789246950033e-12, -3.1285197092080647e-13, 7.394435821392195e-11, -1.7327748753779447e-10, -1.4967532701896661e-15, 7.512327696275132e-16, 2.278058301384341e-05, -1.9747389331821727e-06, -1.923874531624063e-08, 1.01838593022219e-09], [137961187061.18604, 218513798702.60617])

# ([3.639102064485096, -1.463622371573943e-12, -3.4037321134036137e-13, 8.741332841351514e-11, -1.7327748753779447e-10, -1.4967532701896661e-15, 7.512327696275132e-16, 2.278058301384341e-05, -1.9747389331821727e-06, -1.923874531624063e-08, 1.01838593022219e-09], [137961066596.36227, 218513981008.1009])
# ([4.857756793730918, -1.2455107154750098e-12, -3.5741078391942567e-13, 7.473782792516227e-11, -1.631504211751271e-10, -1.5958001925145566e-15, 7.01194690347997e-16, 1.8004605917684335e-05, -1.5337368111090922e-06, -1.819079173373511e-08, 8.58203189122128e-10], [503320246640.39465, 173609358495.8044])
# ([4.888364894518787, -1.4403030393222524e-12, -1.9569419923489565e-13, 7.642003214262974e-11, -1.7327748753779447e-10, -1.4967532701896661e-15, 7.512327696275132e-16, 2.278058301384341e-05, -1.9747389331821727e-06, -1.923874531624063e-08, 1.01838593022219e-09], [137961210927.9563, 218513762584.236])

# ([4.265191855497781, -1.1736810312923741e-12, -3.4213251609977867e-13, 7.919191379429637e-11, -1.7111256137336347e-10, -1.6902354415518642e-15, 8.278465661357536e-16, 2.3175749809881503e-05, -2.255494640418875e-06, -1.7235375634276428e-08, 1.091449214664448e-09], [137575855744.69647, 389803456029.3806])
# ([4.888364894518787, -1.4403030393222524e-12, -1.9569419923489565e-13, 8.074693519670645e-11, -1.5763914366123855e-10, -1.4381083143952057e-15, 6.96943326280353e-16, 2.2314172890980375e-05, -1.7993024669542327e-06, -1.9937819935722993e-08, 9.625552842382996e-10], [252043260858.49432, 153038776952.00806])
# ([4.986778486604648, -1.1194048042015638e-12, -3.333233684233509e-13, 7.610308726420109e-11, -1.8905574882816203e-10, -1.4967532701896661e-15, 7.512327696275132e-16, 2.278058301384341e-05, -1.9747389331821727e-06, -1.923874531624063e-08, 1.01838593022219e-09], [137961222301.80038, 218513745380.57822])


# Removed Selective Mutation
# ([5.343205390122465, -1.5324981132919922e-12, -2.9481605932236154e-13, 6.8963644485412e-11, -1.5084930715312178e-10, -1.578689686652586e-15, 7.758695878029136e-16, 2.4550583948998935e-05, -2.042459948980672e-06, -2.098882376954169e-08, 1.09141227016789e-09], [64503970464.29796, 374231980738.79126])
# ([4.886660881813696, -1.3544440136582311e-12, -1.818029368989202e-13, 9.250428190897665e-11, -2.135307828287463e-10, -1.4498790325440372e-15, 6.614624520491442e-16, 2.246247055714387e-05, -1.728491876241643e-06, -2.0274902353990702e-08, 9.365301635438061e-10], [321260929088.93384, 113950110518.0384])
# ([4.4254066510236525, -1.332038501395836e-12, -2.644593179182468e-13, 6.961897497935213e-11, -1.5995816120332162e-10, -1.3444342441407e-15, 7.754712720171229e-16, 2.4175453861972983e-05, -2.1739881239029876e-06, -1.7375187827239496e-08, 9.534665790875504e-10], [71980936639.16061, 286338669957.05597])


# ([5.211127644194082, -1.3806705458766076e-12, -1.5921116750693803e-13, 8.586921194993237e-11, -2.1802452632143882e-10, -1.4514120657517376e-15, 5.278168824938112e-16, 2.599563304802043e-05, -1.7570714770612192e-06, -1.8840834587339365e-08, 8.252112567718761e-10], [211473663223.71216, 440558491145.674])
# ([4.705047092684407, -1.4772040011613657e-12, -1.8825763307931724e-13, 9.781133221291978e-11, -2.0913757231551474e-10, -1.2268411517146056e-15, 7.22798542127232e-16, 2.2750291005191946e-05, -1.4004548558200827e-06, -1.8419700719922213e-08, 6.991112756193292e-10], [283267362588.54987, 77417143360.71689])
# ([4.705047092684407, -1.4772040011613657e-12, -1.8825763307931724e-13, 9.781133221291978e-11, -2.0913757231551474e-10, -1.2268411517146056e-15, 7.22798542127232e-16, 2.2750291005191946e-05, -1.4004548558200827e-06, -1.8419700719922213e-08, 6.991112756193292e-10], [283267362588.54987, 77417143360.71689])

