file = open("Final/log.txt", "r")
import math

# trrain valid
best_ind_val = ([], [math.inf, math.inf])
best_ind_train = ([], [math.inf, math.inf])
best_ind_overall = ([], [math.inf, math.inf])


def overall(weights):
    # print(weights)
    train_err = weights[0]
    valid_err = weights[1]
    # return train_err
    if train_err == math.inf or valid_err == math.inf:
        weight = 0
    elif (train_err + valid_err) + abs(train_err - valid_err) == 0:
        weight = math.inf
    else:
        weight = 1 / ((train_err + valid_err) + abs(train_err - valid_err))
    # print(train_err, valid_err, weight)
    return weight


def format(line):
    vector, err = line.split(":")
    vector = vector.strip("[] \n").split(", ")
    err = err.strip("[] \n").split(", ")
    vector = [float(num) for num in vector]
    err = [float(num) for num in err]
    return (vector, err)


i = 0
init_pop = []
while True:
    i += 1
    line = file.readline()
    if line == "":
        break
    if line[0] == "[":

        ind = format(line)
        # print("#@#$")
        # print(ind[1], type(ind[1]))
        # if ind[0] == VECTOR:
        #     print(overall(ind[1]))
        # if overall(ind[1]) >4.2e-12:
        #     print(ind[0], overall(ind[1]), ind[1])
        #     init_pop.append(ind)
        if 7e10 < ind[1][0] < 9e10 and 7e10 < ind[1][1] < 9e10:
            init_pop.append(ind)
        if best_ind_val[1][1] > ind[1][1]:
            best_ind_val = ind
        if best_ind_train[1][0] > ind[1][0]:
            best_ind_train = ind
        if overall(best_ind_overall[1]) < overall(ind[1]):
            best_ind_overall = ind

file.close()

print(best_ind_train)
print(best_ind_val)
print(best_ind_overall)

# ([-10.0, -1.457990220064754e-12, -10.0, 4.620107525277624e-11, -1.7521481289918844e-10, -1.8366976965696096e-15, 8.529440604118815e-16, 2.2942330256117977e-05, -2.0472100298772093e-06, -1.597928341587757e-08, 9.982140340891233e-10], [13072745615.275206, 363475493334.69293])
# ([3.1949023879097087, -1.1566445813966808e-12, -1.706303783105885e-13, 7.164510593350617e-11, -2.9798027152778016e-10, -1.4938953170083339e-15, 1.5155307589985295e-15, 3.493791911133584e-05, -2.049689889668182e-06, -9.819094534206726e-09, 7.375886083349607e-10], [1585818192301.4272, 115225209097.53365])
# ([3.527148438220248, -1.1667084630712077e-12, -1.706303783105885e-13, 9.307512270052608e-11, -1.7521481289918844e-10, -2.1685394479697994e-15, 6.35513405133212e-16, 2.2942330256117977e-05, -2.049689889668182e-06, -1.597928341587757e-08, 9.982140340891233e-10], [60135843090.301476, 234428840487.46906])
print(len(init_pop))


def sorter(e):
    return overall(e[1])


init_pop.sort(key=sorter, reverse=True)
# for ind in init_pop:
#     print(ind, overall(ind[1]))
population = []
[population.append(x) for x in init_pop if x not in population]
population = [ind[0] for ind in population]
print(len(population))
print(population)

# 1e11
vect = [[-0.2514088355406865, -1.0100522284089422e-12, -1.0236862828469877e-13, 4.70324140387958e-11,
         -9.967979520089834e-11, -1.231259025267007e-15, 1.4788337098153927e-15, 1.640961519289103e-05,
         -1.3685800405589627e-06, -8.859630381595768e-09, 5.958721156077491e-10],
        [-0.25792088985888145, -1.0203140023276259e-12, -1.0166978866793766e-13, 4.7409156204656457e-11,
         -9.911124670903147e-11, -1.2293251911031828e-15, 1.4844077715775696e-15, 1.635980122816645e-05,
         -1.3738124522778026e-06, -8.72618362619581e-09, 5.954701157520016e-10],
        [-0.2528085218174644, -1.0153815334883507e-12, -1.0144522963602986e-13, 4.7037089302882624e-11,
         -9.879703442382113e-11, -1.2393240938260533e-15, 1.4754243968492119e-15, 1.6363557939874368e-05,
         -1.3745870360788053e-06, -8.81614649047846e-09, 5.979623992012028e-10],
        [-0.2562164331096904, -1.0186328381082408e-12, -1.0155209790955882e-13, 4.727799231765112e-11,
         -9.898292204129868e-11, -1.2331141836875108e-15, 1.4814247728302105e-15, 1.6362464053975297e-05,
         -1.3740590982729794e-06, -8.756234636723842e-09, 5.962959791528883e-10],
        [-0.25683043849046333, -1.019218824398747e-12, -1.0157132086331451e-13, 4.7321393852251475e-11,
         -9.901637636107903e-11, -1.2319956926328981e-15, 1.482505587411796e-15, 1.636226438664456e-05,
         -1.3739642725653095e-06, -8.745439390831677e-09, 5.959958700422312e-10]]

# 1e12
vect2 = [[-0.4446272683303133, -7.699867785630767e-13, -1.1471706705619784e-13, 5.5495402523096396e-11,
          -1.0760061623648148e-10, -1.4205865435446267e-15, 1.2132796209675347e-15, 1.7385922236855182e-05,
          -1.2661373241579241e-06, -1.028370122989764e-08, 5.234329351412101e-10],
         [-0.3652418210380744, -8.518598816677541e-13, -1.1358702681266765e-13, 4.656221883882493e-11,
          -9.466974733029413e-11, -1.3916025307357774e-15, 1.4066126246993278e-15, 1.845705875517251e-05,
          -1.3496991053096873e-06, -8.802326595292836e-09, 5.155892238932614e-10],
         [-0.2504292696560572, -9.33240760133122e-13, -1.1658035055964203e-13, 4.0983794762042585e-11,
          -1.0260011923828558e-10, -1.1805065465443815e-15, 1.3993921436713656e-15, 1.832064019118474e-05,
          -1.3631823262789832e-06, -9.742817707231347e-09, 5.375027791997789e-10],
         [-0.14733690917098313, -8.539085384542893e-13, -1.448552392059031e-13, 7.742668210407351e-11,
          -1.338267891404295e-10, -2.3210009339961594e-15, 1.3640977434398377e-15, 2.0835095947212997e-05,
          -1.5322191362823278e-06, -1.0831875358261676e-08, 6.353392403729022e-10],
         [-0.2597433230052794, -1.0350812779942848e-12, -1.0056405993581699e-13, 4.4094057509921404e-11,
          -1.011371873681545e-10, -1.2683444314124231e-15, 1.4420679399823547e-15, 1.5962152475771193e-05,
          -1.369309184913911e-06, -8.440958348710968e-09, 5.344846797996074e-10]]

#
vect3 = [[-0.25772465743001205, -7.53225752827018e-13, -1.1581572763138006e-13, 5.244305245065811e-11,
          -1.2732955474172854e-10, -1.1051766355054395e-15, 1.540410816411046e-15, 1.538391224879513e-05,
          -1.4384986311914935e-06, -8.757278554521815e-09, 6.301969993490921e-10],
         [-0.2371279160109743, -8.471310914593747e-13, -1.2100910030639804e-13, 4.633855946105399e-11,
          -1.1759362846670572e-10, -1.0191368536166604e-15, 1.4512349994268425e-15, 1.5876364861681312e-05,
          -1.3754540860471798e-06, -8.970177222109484e-09, 6.028103561040273e-10],
         [-0.24162519570707086, -8.668130081664829e-13, -1.1897826771708386e-13, 4.6100473884707505e-11,
          -1.1574681071250409e-10, -1.0446179781770998e-15, 1.4568684924473246e-15, 1.584773183122468e-05,
          -1.378945369854703e-06, -8.931780133714578e-09, 6.041976229791648e-10],
         [-0.2359425320337427, -8.494213026202078e-13, -1.2117700256969272e-13, 4.630530619754383e-11,
          -1.1732699535420905e-10, -1.0194845733881822e-15, 1.4507252545836221e-15, 1.5887097522374808e-05,
          -1.3723999259166409e-06, -8.959676370164679e-09, 6.013273618713732e-10],
         [-0.27655805852941845, -8.203683978636632e-13, -1.2438048465563135e-13, 4.319189932096802e-11,
          -1.3437181372080938e-10, -1.032231782311464e-15, 1.553729497907159e-15, 1.6117728812626245e-05,
          -1.3898577515178317e-06, -9.914970927867368e-09, 6.272233114991476e-10],
         [-0.2348977658369064, -8.517785429711936e-13, -1.213036654028096e-13, 4.6276636582717894e-11,
          -1.170552684716178e-10, -1.0200782786933076e-15, 1.4502858827960911e-15, 1.5897171578298956e-05,
          -1.369631417712946e-06, -8.949324616341595e-09, 5.999687588399767e-10],
         [-0.23735785435645176, -8.467016473723009e-13, -1.209266215084494e-13, 4.630899424011407e-11,
          -1.1771438626109792e-10, -1.0181444455210466e-15, 1.4528352211489475e-15, 1.587929939204794e-05,
          -1.3748307787010542e-06, -8.965278079631045e-09, 6.028426090576572e-10],
         [-0.2782975282090088, -9.514049252297268e-13, -1.0649869320088281e-13, 4.4961383412950304e-11,
          -1.088743943173309e-10, -1.1787578066456276e-15, 1.500079947541846e-15, 1.5612956536174323e-05,
          -1.4236634451240421e-06, -8.78100151647252e-09, 6.246865366525676e-10],
         [-0.23746802583310378, -8.482288690777834e-13, -1.2082850340846332e-13, 4.6323662659478605e-11,
          -1.1760536635036333e-10, -1.019505800677325e-15, 1.4527326093109649e-15, 1.5878598075237917e-05,
          -1.3743684653145929e-06, -8.961403288215419e-09, 6.026995332539224e-10],
         [-0.23703194349353715, -8.423910188849697e-13, -1.2007859011368578e-13, 4.640842591066613e-11,
          -1.1826834014346124e-10, -1.025203733139965e-15, 1.441676319155295e-15, 1.5917812471004937e-05,
          -1.3791045904336154e-06, -8.936384820366424e-09, 6.040166926463306e-10]]
